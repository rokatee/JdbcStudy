/*===============
  DBConn.java
===============*/

// ※ 싱글톤(singleton) 디자인 패턴을 이용한 Database 연결 객체 생성 전용 클래스
//    → DB 연결 과정이 가장 부하가 크기 때문에
//		 연결이 필요할 때마다 객체를 생성하는 것이 아니라
//		 한 번 연결된 객체를 계속 사용할 수 있도록 처리


package com.util;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConn
{
	// 변수 선언
	private static Connection dbConn;
    // private → 정보 은닉	
	// static → 정적 변수
	// 자동으로 초기화 지원 → null
	
	// 메소드 정의 → 연결
	public static Connection getConnection()
	{
		// 한 번 연결된 객체를 계속 사용...
		// 즉, 연결되지 않은 경우에만 연결을 시도하겠다는 의미
		//	→ singleton(디자인 패턴)
		if(dbConn == null)
		{
			try
			{
				String url = "jdbc:oracle:thin:@211.238.142.52:1521:xe";
				// 211.238.142.52 는 오라클 서버 IP 주소를 기재하는 부분
				// 1521 은 오라클 port number
				// xe 는 오라클 sid(express edition 은 xe)
				
				String user = "scott";	// 오라클 사용자 계정 이름
				String pwd = "tiger";	// 오라클 사용자 계정 암호
				
				Class.forName("oracle.jdbc.driver.OracleDriver");
				// OracleDriver 클래스에 대한 객체 생성
				// 드라이버 로딩 → JVM에 전달
				
				dbConn = DriverManager.getConnection(url, user, pwd);
				// 오라클 서버 실제 연결
				// 위 (line 34 ~ 44)는 연결을 위한 환경을 설정하는 과정
				// 갖고 있는 인자값(매개변수)은 오라클주소, 계정명, 패스워드
				
			} catch (Exception e)
			{
				System.out.println(e.toString());
				// 오라클 서버 연결 실패 시
			}
		}
		
		// 구성된 연결 객체 반환
		return dbConn;
	
	} // end Connection
	
	// getConnection() 메소드 오버로딩 → 연결
	public static Connection getConnection(String url, String user, String pwd)
	{
		if (dbConn == null)
		{
			try
			{
				Class.forName("oracle.jdbc.driver.OracleDriver");
				dbConn = DriverManager.getConnection(url, user, pwd);
			} catch (Exception e)
			{
				System.out.println(e.toString());
			}
		}
		
		return dbConn;
	}
	
	public static void close()
	{
		if(dbConn != null)
		{
			try
			{
				if (!dbConn.isClosed())
				{
					dbConn.close();
				}
				
			} catch (Exception e)
			{
				System.out.println(e.toString());
			}
		}
		
		dbConn = null;
	}
}
